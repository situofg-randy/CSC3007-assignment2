{"ast":null,"code":"var _jsxFileName = \"/Users/angrandy/Desktop/CSC3007-assignment2/src/Barchart.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { print } from \"./print\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Barchart = () => {\n  _s();\n\n  const data = require(\"./data.json\");\n\n  let keys = new Set();\n  Object.values(data).forEach(v => {\n    keys.add(v.year);\n  });\n  keys = Array.from(keys);\n  let res = data.reduce((acc, _ref) => {\n    let {\n      year,\n      level_2,\n      value\n    } = _ref;\n    acc[year] = acc[year] || new Set();\n    acc[year][level_2] = value;\n    acc[year][year] = year;\n    return acc;\n  }, {});\n  let values = [];\n  keys.forEach(k => {\n    values.push(res[k]);\n  });\n  let colors = {};\n\n  const getRandomColor = () => {\n    let letters = '0123456789ABCDEF';\n    let color = '#';\n\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  };\n\n  keys.forEach(k => {\n    colors[k] = getRandomColor();\n  });\n  print(colors);\n  const [currentKeys, setCurrentKeys] = useState(keys);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Barchart, \"KQZP+loKewHf1kFgG3oU7bU1SNI=\");\n\n_c = Barchart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Barchart\");","map":{"version":3,"names":["React","useEffect","useState","print","Barchart","data","require","keys","Set","Object","values","forEach","v","add","year","Array","from","res","reduce","acc","level_2","value","k","push","colors","getRandomColor","letters","color","i","Math","floor","random","currentKeys","setCurrentKeys"],"sources":["/Users/angrandy/Desktop/CSC3007-assignment2/src/Barchart.js"],"sourcesContent":["import React from \"react\";  \nimport { useEffect, useState } from \"react\";\nimport { print } from \"./print\";  \n\nexport const Barchart = () => {\n    const data = require(\"./data.json\")\n    \n    let keys = new Set()\n    Object.values(data).forEach((v) => {keys.add(v.year)})      \n    keys = Array.from(keys)\n\n    let res = data.reduce((acc, {year, level_2, value}) =>\n    {\n        acc[year] = acc[year] || new Set();\n        acc[year][level_2] = value\n        acc[year][year] = year\n        return acc;\n    }, {})\n\n    let values = []\n\n    keys.forEach(k => {\n         values.push(res[k])\n    });\n\n    let colors = {}\n\n    const getRandomColor = () => {\n        let letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n          color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    keys.forEach(k => {\n        colors[k] = getRandomColor() \n    })\n\n    print(colors)\n\n    const [currentKeys, setCurrentKeys] = useState(keys)\n\n    \n    return (\n        <React.Fragment>\n            {/* <StackedBarChart data={values} keys={keys} colors={colors} />\n\n            <div className=\"fields\">\n                {keys.map(key => (\n                    <div key={key} className=\"field\">\n                        <input id={key} \n                        type=\"checkbox\" \n                        checked={currentKeys.includes(key)} \n                        onChange={e => { \n                            if (e.target.checked) {\n                                setCurrentKeys(Array.from(new Set([...currentKeys, key])))\n                            } else {\n                                setCurrentKeys(currentKeys.filter(_key => _key !== key))\n                        }}} \n                        />\n                        <label for={key} style={{color:colors[key]}}>key</label>\n                    </div>\n                ))}\n            </div> */}\n\n        </React.Fragment>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,KAAT,QAAsB,SAAtB;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EAC1B,MAAMC,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;EAEA,IAAIC,IAAI,GAAG,IAAIC,GAAJ,EAAX;EACAC,MAAM,CAACC,MAAP,CAAcL,IAAd,EAAoBM,OAApB,CAA6BC,CAAD,IAAO;IAACL,IAAI,CAACM,GAAL,CAASD,CAAC,CAACE,IAAX;EAAiB,CAArD;EACAP,IAAI,GAAGQ,KAAK,CAACC,IAAN,CAAWT,IAAX,CAAP;EAEA,IAAIU,GAAG,GAAGZ,IAAI,CAACa,MAAL,CAAY,CAACC,GAAD,WACtB;IAAA,IAD4B;MAACL,IAAD;MAAOM,OAAP;MAAgBC;IAAhB,CAC5B;IACIF,GAAG,CAACL,IAAD,CAAH,GAAYK,GAAG,CAACL,IAAD,CAAH,IAAa,IAAIN,GAAJ,EAAzB;IACAW,GAAG,CAACL,IAAD,CAAH,CAAUM,OAAV,IAAqBC,KAArB;IACAF,GAAG,CAACL,IAAD,CAAH,CAAUA,IAAV,IAAkBA,IAAlB;IACA,OAAOK,GAAP;EACH,CANS,EAMP,EANO,CAAV;EAQA,IAAIT,MAAM,GAAG,EAAb;EAEAH,IAAI,CAACI,OAAL,CAAaW,CAAC,IAAI;IACbZ,MAAM,CAACa,IAAP,CAAYN,GAAG,CAACK,CAAD,CAAf;EACJ,CAFD;EAIA,IAAIE,MAAM,GAAG,EAAb;;EAEA,MAAMC,cAAc,GAAG,MAAM;IACzB,IAAIC,OAAO,GAAG,kBAAd;IACA,IAAIC,KAAK,GAAG,GAAZ;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAhB;IACD;;IACD,OAAOJ,KAAP;EACH,CAPD;;EASApB,IAAI,CAACI,OAAL,CAAaW,CAAC,IAAI;IACdE,MAAM,CAACF,CAAD,CAAN,GAAYG,cAAc,EAA1B;EACH,CAFD;EAIAtB,KAAK,CAACqB,MAAD,CAAL;EAEA,MAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgC/B,QAAQ,CAACK,IAAD,CAA9C;EAGA,oBACI,QAAC,KAAD,CAAO,QAAP;IAAA;IAAA;IAAA;EAAA,QADJ;AAwBH,CAjEM;;GAAMH,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}