{"ast":null,"code":"var _jsxFileName = \"/Users/angrandy/Desktop/CSC3007-assignment2/src/Barchart.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { print } from \"./print\";\nimport StackedBarChart from \"./StackedBarChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Barchart = () => {\n  _s();\n\n  const input = require(\"./data.json\");\n\n  let year = new Set();\n  Object.values(input).forEach(v => {\n    year.add(v.year);\n  });\n  year = Array.from(year);\n  let allKeys = new Set();\n  Object.values(input).forEach(v => {\n    allKeys.add(v.level_2);\n  });\n  allKeys = Array.from(allKeys);\n  let res = input.reduce((acc, _ref) => {\n    let {\n      year,\n      level_2,\n      value\n    } = _ref;\n    acc[year] = acc[year] || new Set();\n    acc[year][level_2] = parseInt(value);\n    acc[year][\"year\"] = parseInt(year);\n    return acc;\n  }, {});\n  let data = [];\n  year.forEach(k => {\n    data.push(res[k]);\n  });\n\n  const getRandomColor = () => {\n    let letters = '0123456789ABCDEF';\n    let color = '#';\n\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  };\n\n  let color = [\"#656431\", \"#68A696\", \"#9F2964\", \"#C19131\", \"#A5235F\", \"#67ED30\", \"#14C069\", \"#109AE0\", \"#DCB545\", \"#BF354F\"];\n  let colors = {};\n\n  for (let v in allKeys) {\n    colors[allKeys[v]] = color[v];\n  }\n\n  print(year);\n  const [keys, setKeys] = useState(allKeys);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"barchart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cases Recorded For Major Offences  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StackedBarChart, {\n      data: data,\n      keys: keys,\n      colors: colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fields\",\n      children: allKeys.map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: key,\n          type: \"checkbox\",\n          checked: keys.includes(key),\n          onChange: e => {\n            if (e.target.checked) {\n              setKeys(Array.from(new Set([...keys, key])));\n            } else {\n              setKeys(keys.filter(_key => _key !== key));\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: key,\n          style: {\n            color: colors[key]\n          },\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Barchart, \"bLrzNhkWvLhr/bWpkTDoOLlm1yI=\");\n\n_c = Barchart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Barchart\");","map":{"version":3,"names":["React","useState","print","StackedBarChart","Barchart","input","require","year","Set","Object","values","forEach","v","add","Array","from","allKeys","level_2","res","reduce","acc","value","parseInt","data","k","push","getRandomColor","letters","color","i","Math","floor","random","colors","keys","setKeys","map","key","includes","e","target","checked","filter","_key"],"sources":["/Users/angrandy/Desktop/CSC3007-assignment2/src/Barchart.js"],"sourcesContent":["import React from \"react\";  \nimport { useState } from \"react\";\nimport { print } from \"./print\";  \nimport StackedBarChart from \"./StackedBarChart\"\n\nexport const Barchart = () => {\n    const input = require(\"./data.json\")\n    \n    let year = new Set()\n    Object.values(input).forEach((v) => {year.add(v.year)})    \n    year = Array.from(year)\n    \n    let allKeys = new Set()\n    Object.values(input).forEach((v) => {allKeys.add(v.level_2)})      \n    allKeys = Array.from(allKeys)\n\n    let res = input.reduce((acc, {year, level_2, value}) =>\n    {\n        acc[year] = acc[year] || new Set();\n        acc[year][level_2] = parseInt(value)\n        acc[year][\"year\"] = parseInt(year)\n        return acc;\n    }, {})\n\n    let data = []\n\n    year.forEach(k => {\n         data.push(res[k])\n    });\n\n\n    const getRandomColor = () => {\n        let letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n          color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    let color = [\n        \"#656431\",\n        \"#68A696\",\n        \"#9F2964\",\n        \"#C19131\",\n        \"#A5235F\",\n        \"#67ED30\",\n        \"#14C069\",\n        \"#109AE0\",\n        \"#DCB545\",\n        \"#BF354F\"\n    ]\n\n    let colors = {}\n    for (let v in allKeys) {\n        colors[allKeys[v]] = color[v]\n    }\n\n    print(year)\n\n    const [keys, setKeys] = useState(allKeys)\n\n    \n    return (\n        <div className=\"barchart\">\n            <h2>Cases Recorded For Major Offences  </h2>\n            <StackedBarChart data={data} keys={keys} colors={colors} />\n\n            <div className=\"fields\">\n                {allKeys.map(key => (\n                <div key={key} className=\"field\">\n                    <input\n                    id={key}\n                    type=\"checkbox\"\n                    checked={keys.includes(key)}\n                    onChange={e => {\n                        if (e.target.checked) {\n                        setKeys(Array.from(new Set([...keys, key])));\n                        } else {\n                        setKeys(keys.filter(_key => _key !== key));\n                        }\n                    }}\n                    />\n                    <label htmlFor={key} style={{ color: colors[key] }}>\n                    {key}\n                    </label>\n                </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}