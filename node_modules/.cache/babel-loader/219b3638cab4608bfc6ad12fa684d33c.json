{"ast":null,"code":"var _jsxFileName = \"/Users/angrandy/Desktop/CSC3007-assignment2/src/Barchart.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { print } from \"./print\";\nimport StackedBarChart from \"./StackedBarChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Barchart = () => {\n  _s();\n\n  const data = require(\"./data.json\");\n\n  let allKeys = new Set();\n  Object.values(data).forEach(v => {\n    allKeys.add(v.year);\n  });\n  allKeys = Array.from(allKeys);\n  let res = data.reduce((acc, _ref) => {\n    let {\n      year,\n      level_2,\n      value\n    } = _ref;\n    acc[\"year\"] = year || new Set();\n    acc[year][level_2] = value;\n    acc[year][year] = year;\n    return acc;\n  }, {});\n  let values = [];\n  allKeys.forEach(k => {\n    values.push(res[k]);\n  });\n  let colors = {};\n\n  const getRandomColor = () => {\n    let letters = '0123456789ABCDEF';\n    let color = '#';\n\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  };\n\n  colors = {\n    '2011': \"#D35583\",\n    '2012': \"#8F3F0E\",\n    '2013': \"#58897E\"\n  };\n  print(values);\n  const [keys, setKeys] = useState(allKeys);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Barchart, \"bLrzNhkWvLhr/bWpkTDoOLlm1yI=\");\n\n_c = Barchart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Barchart\");","map":{"version":3,"names":["React","useState","print","StackedBarChart","Barchart","data","require","allKeys","Set","Object","values","forEach","v","add","year","Array","from","res","reduce","acc","level_2","value","k","push","colors","getRandomColor","letters","color","i","Math","floor","random","keys","setKeys"],"sources":["/Users/angrandy/Desktop/CSC3007-assignment2/src/Barchart.js"],"sourcesContent":["import React from \"react\";  \nimport { useState } from \"react\";\nimport { print } from \"./print\";  \nimport StackedBarChart from \"./StackedBarChart\"\n\nexport const Barchart = () => {\n    const data = require(\"./data.json\")\n    \n    let allKeys = new Set()\n    Object.values(data).forEach((v) => {allKeys.add(v.year)})      \n    allKeys = Array.from(allKeys)\n\n    let res = data.reduce((acc, {year, level_2, value}) =>\n    {\n        acc[\"year\"] = year || new Set();\n        acc[year][level_2] = value\n        acc[year][year] = year\n        return acc;\n    }, {})\n\n    let values = []\n\n    allKeys.forEach(k => {\n         values.push(res[k])\n    });\n\n    let colors = {}\n\n    const getRandomColor = () => {\n        let letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n          color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    colors = {\n        '2011': \"#D35583\",\n        '2012': \"#8F3F0E\",\n        '2013': \"#58897E\"\n    }\n\n    print(values)\n\n    const [keys, setKeys] = useState(allKeys)\n\n    \n    return (\n        <React.Fragment>\n            {/* <h2>Stacked Bar Chart with D3 </h2>\n            <StackedBarChart data={data} keys={keys} colors={colors} />\n\n            <div className=\"fields\">\n                {allKeys.map(key => (\n                <div key={key} className=\"field\">\n                    <input\n                    id={key}\n                    type=\"checkbox\"\n                    checked={keys.includes(key)}\n                    onChange={e => {\n                        if (e.target.checked) {\n                        setKeys(Array.from(new Set([...keys, key])));\n                        } else {\n                        setKeys(keys.filter(_key => _key !== key));\n                        }\n                    }}\n                    />\n                    <label htmlFor={key} style={{ color: colors[key] }}>\n                    {key}\n                    </label>\n                </div>\n                ))}\n            </div> */}\n        </React.Fragment>\n    )\n}\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EAC1B,MAAMC,IAAI,GAAGC,OAAO,CAAC,aAAD,CAApB;;EAEA,IAAIC,OAAO,GAAG,IAAIC,GAAJ,EAAd;EACAC,MAAM,CAACC,MAAP,CAAcL,IAAd,EAAoBM,OAApB,CAA6BC,CAAD,IAAO;IAACL,OAAO,CAACM,GAAR,CAAYD,CAAC,CAACE,IAAd;EAAoB,CAAxD;EACAP,OAAO,GAAGQ,KAAK,CAACC,IAAN,CAAWT,OAAX,CAAV;EAEA,IAAIU,GAAG,GAAGZ,IAAI,CAACa,MAAL,CAAY,CAACC,GAAD,WACtB;IAAA,IAD4B;MAACL,IAAD;MAAOM,OAAP;MAAgBC;IAAhB,CAC5B;IACIF,GAAG,CAAC,MAAD,CAAH,GAAcL,IAAI,IAAI,IAAIN,GAAJ,EAAtB;IACAW,GAAG,CAACL,IAAD,CAAH,CAAUM,OAAV,IAAqBC,KAArB;IACAF,GAAG,CAACL,IAAD,CAAH,CAAUA,IAAV,IAAkBA,IAAlB;IACA,OAAOK,GAAP;EACH,CANS,EAMP,EANO,CAAV;EAQA,IAAIT,MAAM,GAAG,EAAb;EAEAH,OAAO,CAACI,OAAR,CAAgBW,CAAC,IAAI;IAChBZ,MAAM,CAACa,IAAP,CAAYN,GAAG,CAACK,CAAD,CAAf;EACJ,CAFD;EAIA,IAAIE,MAAM,GAAG,EAAb;;EAEA,MAAMC,cAAc,GAAG,MAAM;IACzB,IAAIC,OAAO,GAAG,kBAAd;IACA,IAAIC,KAAK,GAAG,GAAZ;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;MAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAhB;IACD;;IACD,OAAOJ,KAAP;EACH,CAPD;;EASAH,MAAM,GAAG;IACL,QAAQ,SADH;IAEL,QAAQ,SAFH;IAGL,QAAQ;EAHH,CAAT;EAMAtB,KAAK,CAACQ,MAAD,CAAL;EAEA,MAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBhC,QAAQ,CAACM,OAAD,CAAhC;EAGA,oBACI,QAAC,KAAD,CAAO,QAAP;IAAA;IAAA;IAAA;EAAA,QADJ;AA4BH,CAvEM;;GAAMH,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}