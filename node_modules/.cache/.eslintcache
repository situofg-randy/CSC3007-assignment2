[{"/Users/angrandy/Desktop/CSC3007-assignment2/src/index.js":"1","/Users/angrandy/Desktop/CSC3007-assignment2/src/Barchart.js":"2","/Users/angrandy/Desktop/CSC3007-assignment2/src/print.js":"3","/Users/angrandy/Desktop/CSC3007-assignment2/src/StackedBarChart.js":"4","/Users/angrandy/Desktop/CSC3007-assignment2/src/useResizeObserver.js":"5"},{"size":272,"mtime":1655649319545,"results":"6","hashOfConfig":"7"},{"size":2398,"mtime":1655653524563,"results":"8","hashOfConfig":"7"},{"size":3990,"mtime":1655652197498,"results":"9","hashOfConfig":"7"},{"size":2164,"mtime":1655652438267,"results":"10","hashOfConfig":"7"},{"size":588,"mtime":1655648598734,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a4cs9i",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/angrandy/Desktop/CSC3007-assignment2/src/index.js",[],[],"/Users/angrandy/Desktop/CSC3007-assignment2/src/Barchart.js",["29"],[],"import React from \"react\";  \nimport { useState } from \"react\";\nimport { print } from \"./print\";  \nimport StackedBarChart from \"./StackedBarChart\"\n\nexport const Barchart = () => {\n    const input = require(\"./data.json\")\n    \n    let year = new Set()\n    Object.values(input).forEach((v) => {year.add(v.year)})    \n    year = Array.from(year)\n    \n    let allKeys = new Set()\n    Object.values(input).forEach((v) => {allKeys.add(v.level_2)})      \n    allKeys = Array.from(allKeys)\n\n    let res = input.reduce((acc, {year, level_2, value}) =>\n    {\n        acc[year] = acc[year] || new Set();\n        acc[year][level_2] = parseInt(value)\n        acc[year][\"year\"] = parseInt(year)\n        return acc;\n    }, {})\n\n    let data = []\n\n    year.forEach(k => {\n         data.push(res[k])\n    });\n\n\n    const getRandomColor = () => {\n        let letters = '0123456789ABCDEF';\n        let color = '#';\n        for (let i = 0; i < 6; i++) {\n          color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    let color = [\n        \"#656431\",\n        \"#68A696\",\n        \"#9F2964\",\n        \"#C19131\",\n        \"#A5235F\",\n        \"#67ED30\",\n        \"#14C069\",\n        \"#109AE0\",\n        \"#DCB545\",\n        \"#BF354F\"\n    ]\n\n    let colors = {}\n    for (let v in allKeys) {\n        colors[allKeys[v]] = color[v]\n    }\n\n    print(year)\n\n    const [keys, setKeys] = useState(allKeys)\n\n    \n    return (\n        <React.Fragment>\n            <h2>Cases Recorded For Major Offences  </h2>\n            <StackedBarChart data={data} keys={keys} colors={colors} />\n\n            <div className=\"fields\">\n                {allKeys.map(key => (\n                <div key={key} className=\"field\">\n                    <input\n                    id={key}\n                    type=\"checkbox\"\n                    checked={keys.includes(key)}\n                    onChange={e => {\n                        if (e.target.checked) {\n                        setKeys(Array.from(new Set([...keys, key])));\n                        } else {\n                        setKeys(keys.filter(_key => _key !== key));\n                        }\n                    }}\n                    />\n                    <label htmlFor={key} style={{ color: colors[key] }}>\n                    {key}\n                    </label>\n                </div>\n                ))}\n            </div>\n        </React.Fragment>\n    )\n}\n\n\n\n\n","/Users/angrandy/Desktop/CSC3007-assignment2/src/print.js",[],[],[],"/Users/angrandy/Desktop/CSC3007-assignment2/src/StackedBarChart.js",[],[],"/Users/angrandy/Desktop/CSC3007-assignment2/src/useResizeObserver.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":32,"column":11,"nodeType":"32","messageId":"33","endLine":32,"endColumn":25},"no-unused-vars","'getRandomColor' is assigned a value but never used.","Identifier","unusedVar"]